{
    "sourceFile": "03-streams/04-file-server-post/test/server.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 1,
            "patches": [
                {
                    "date": 1681733976742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681734009935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -77,15 +77,15 @@\n             {method: 'POST'},\r\n             (response) => {\r\n               expect(\r\n                   response.statusCode,\r\n-                  'статус код ответа сервера 413'\r\n+                  'статус код ответа сервера 413',\r\n               ).to.equal(413);\r\n \r\n               setTimeout(() => {\r\n                 expect(\r\n                     fse.existsSync(path.join(filesFolder, 'big.png')),\r\n-                    'файл big.png не должен оставаться на диске'\r\n+                    'файл big.png не должен оставаться на диске',\r\n                 ).to.be.false;\r\n                 done();\r\n               }, 100);\r\n             });\r\n@@ -105,14 +105,14 @@\n             {method: 'POST'},\r\n             (response) => {\r\n               expect(\r\n                   response.statusCode,\r\n-                  'статус код ответа сервера 201'\r\n+                  'статус код ответа сервера 201',\r\n               ).to.equal(201);\r\n \r\n               expect(\r\n                   fse.existsSync(path.join(filesFolder, 'small.png')),\r\n-                  'файл small.png должен быть на диске'\r\n+                  'файл small.png должен быть на диске',\r\n               ).to.be.true;\r\n \r\n               done();\r\n             });\r\n@@ -134,9 +134,9 @@\n \r\n           setTimeout(() => {\r\n             expect(\r\n                 fse.existsSync(path.join(filesFolder, 'example.txt')),\r\n-                'файл example.txt не должен оставаться на диске'\r\n+                'файл example.txt не должен оставаться на диске',\r\n             ).to.be.false;\r\n \r\n             done();\r\n           }, 100);\r\n"
                }
            ],
            "date": 1681733976742,
            "name": "Commit-0",
            "content": "const server = require('../server');\r\nconst expect = require('chai').expect;\r\nconst fse = require('fs-extra');\r\nconst path = require('path');\r\nconst http = require('http');\r\n\r\nconst filesFolder = path.resolve(__dirname, '../files');\r\nconst fixturesFolder = path.resolve(__dirname, './fixtures');\r\n\r\ndescribe('streams/file-server-post', () => {\r\n  describe('тесты на файловый сервер', () => {\r\n    before((done) => {\r\n      fse.emptyDirSync(filesFolder);\r\n      server.listen(3001, done);\r\n    });\r\n\r\n    after((done) => {\r\n      fse.emptyDirSync(filesFolder);\r\n      fse.writeFileSync(path.join(filesFolder, '.gitkeep'), '');\r\n      server.close(done);\r\n    });\r\n\r\n    beforeEach(() => {\r\n      fse.emptyDirSync(filesFolder);\r\n    });\r\n\r\n    describe('POST', () => {\r\n      it('возвращается ошибка 409 при создании файла, который есть', (done) => {\r\n        fse.copyFileSync(\r\n            path.join(fixturesFolder, 'small.png'),\r\n            path.join(filesFolder, 'small.png'),\r\n        );\r\n\r\n        const mtime = fse.statSync(path.join(filesFolder, 'small.png')).mtime;\r\n\r\n        const request = http.request(\r\n            'http://localhost:3001/small.png',\r\n            {method: 'POST'},\r\n            (response) => {\r\n              const newMtime = fse.statSync(path.join(filesFolder, 'small.png')).mtime;\r\n\r\n              expect(response.statusCode, 'статус код ответа 409').to.equal(409);\r\n              expect(mtime, 'файл не должен перезаписываться').to.eql(newMtime);\r\n              done();\r\n            });\r\n\r\n        request.on('error', done);\r\n        fse.createReadStream(path.join(fixturesFolder, 'small.png')).pipe(request);\r\n      });\r\n\r\n      it('если тело запроса пустое файл не перезаписывается', (done) => {\r\n        fse.copyFileSync(\r\n            path.join(fixturesFolder, 'small.png'),\r\n            path.join(filesFolder, 'small.png'),\r\n        );\r\n\r\n        const mtime = fse.statSync(path.join(filesFolder, 'small.png')).mtime;\r\n\r\n        const request = http.request(\r\n            'http://localhost:3001/small.png',\r\n            {method: 'POST'},\r\n            (response) => {\r\n              const newMtime = fse.statSync(path.join(filesFolder, 'small.png')).mtime;\r\n\r\n              expect(response.statusCode, 'статус код ответа сервера 409').to.equal(409);\r\n              expect(mtime, 'файл не должен перезаписываться').to.eql(newMtime);\r\n              done();\r\n            });\r\n\r\n        request.on('error', done);\r\n        request.end();\r\n      });\r\n\r\n      it('при попытке создания слишком большого файла - ошибка 413', (done) => {\r\n        const request = http.request(\r\n            'http://localhost:3001/big.png',\r\n            {method: 'POST'},\r\n            (response) => {\r\n              expect(\r\n                  response.statusCode,\r\n                  'статус код ответа сервера 413'\r\n              ).to.equal(413);\r\n\r\n              setTimeout(() => {\r\n                expect(\r\n                    fse.existsSync(path.join(filesFolder, 'big.png')),\r\n                    'файл big.png не должен оставаться на диске'\r\n                ).to.be.false;\r\n                done();\r\n              }, 100);\r\n            });\r\n\r\n        request.on('error', (err) => {\r\n          // EPIPE/ECONNRESET/ECONNABORTED error should\r\n          // occur because we try to pipe after res closed\r\n          if (!['ECONNRESET', 'EPIPE', 'ECONNABORTED'].includes(err.code)) done(err);\r\n        });\r\n\r\n        fse.createReadStream(path.join(fixturesFolder, 'big.png')).pipe(request);\r\n      });\r\n\r\n      it('успешное создание файла', (done) => {\r\n        const request = http.request(\r\n            'http://localhost:3001/small.png',\r\n            {method: 'POST'},\r\n            (response) => {\r\n              expect(\r\n                  response.statusCode,\r\n                  'статус код ответа сервера 201'\r\n              ).to.equal(201);\r\n\r\n              expect(\r\n                  fse.existsSync(path.join(filesFolder, 'small.png')),\r\n                  'файл small.png должен быть на диске'\r\n              ).to.be.true;\r\n\r\n              done();\r\n            });\r\n\r\n        request.on('error', done);\r\n        fse.createReadStream(path.join(fixturesFolder, 'small.png')).pipe(request);\r\n      });\r\n\r\n      it('файл не должен оставаться на диске при обрыве соединения', (done) => {\r\n        const request = http.request(\r\n            'http://localhost:3001/example.txt',\r\n            {method: 'POST'},\r\n            (response) => {\r\n              expect.fail('there should be no response');\r\n            });\r\n\r\n        request.on('error', (err) => {\r\n          if (err.code !== 'ECONNRESET') return done(err);\r\n\r\n          setTimeout(() => {\r\n            expect(\r\n                fse.existsSync(path.join(filesFolder, 'example.txt')),\r\n                'файл example.txt не должен оставаться на диске'\r\n            ).to.be.false;\r\n\r\n            done();\r\n          }, 100);\r\n        });\r\n\r\n        request.write('content');\r\n\r\n        setTimeout(() => {\r\n          request.abort();\r\n        }, 300);\r\n      });\r\n\r\n      it('если путь вложенный - возвращается ошибка 400', (done) => {\r\n        const request = http.request(\r\n            'http://localhost:3001/nested/path',\r\n            {method: 'POST'},\r\n            (response) => {\r\n              expect(response.statusCode, 'статус код ответа 400').to.equal(400);\r\n              done();\r\n            });\r\n\r\n        request.on('error', done);\r\n        request.end();\r\n      });\r\n    });\r\n  });\r\n});\r\n"
        }
    ]
}