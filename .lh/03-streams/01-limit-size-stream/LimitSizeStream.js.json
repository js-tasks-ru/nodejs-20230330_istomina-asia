{
    "sourceFile": "03-streams/01-limit-size-stream/LimitSizeStream.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 27,
            "patches": [
                {
                    "date": 1681377221800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681396443463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n \r\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n     super(options);\r\n+    this.maxSize = options.maxSize;\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {}\r\n }\r\n"
                },
                {
                    "date": 1681396926187,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n const stream = require('stream');\r\n const LimitExceededError = require('./LimitExceededError');\r\n \r\n class LimitSizeStream extends stream.Transform {\r\n+  highWaterMark: 1,\r\n   constructor(options) {\r\n     super(options);\r\n     this.maxSize = options.maxSize;\r\n   }\r\n"
                },
                {
                    "date": 1681396949320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,12 +1,12 @@\n const stream = require('stream');\r\n const LimitExceededError = require('./LimitExceededError');\r\n \r\n class LimitSizeStream extends stream.Transform {\r\n-  highWaterMark: 1,\r\n   constructor(options) {\r\n     super(options);\r\n     this.maxSize = options.maxSize;\r\n+    this.highWaterMark = 1;\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {}\r\n }\r\n"
                },
                {
                    "date": 1681397088988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,13 @@\n   constructor(options) {\r\n     super(options);\r\n     this.maxSize = options.maxSize;\r\n     this.highWaterMark = 1;\r\n+    this.currentSize = 0;\r\n   }\r\n \r\n-  _transform(chunk, encoding, callback) {}\r\n+  _transform(chunk, encoding, callback) {\r\n+    this.currentSize++;\r\n+  }\r\n }\r\n \r\n module.exports = LimitSizeStream;\r\n"
                },
                {
                    "date": 1681397134383,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,11 @@\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n+    if (this.currentSize > this.maxSize) {\r\n+      throw new LimitExceededError('Max size exceeded');\r\n+    }\r\n   }\r\n }\r\n \r\n module.exports = LimitSizeStream;\r\n"
                },
                {
                    "date": 1681397242304,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,14 +4,13 @@\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n     super(options);\r\n     this.maxSize = options.maxSize;\r\n-    this.highWaterMark = 1;\r\n     this.currentSize = 0;\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n-    this.currentSize++;\r\n+    this.currentSize += 1024 * 64;\r\n     if (this.currentSize > this.maxSize) {\r\n       throw new LimitExceededError('Max size exceeded');\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1681397315742,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,13 +4,14 @@\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n     super(options);\r\n     this.maxSize = options.maxSize;\r\n+    this.highWaterMark = 1;\r\n     this.currentSize = 0;\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n-    this.currentSize += 1024 * 64;\r\n+    this.currentSize++;\r\n     if (this.currentSize > this.maxSize) {\r\n       throw new LimitExceededError('Max size exceeded');\r\n     }\r\n   }\r\n"
                },
                {
                    "date": 1681397493941,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,8 +13,9 @@\n     this.currentSize++;\r\n     if (this.currentSize > this.maxSize) {\r\n       throw new LimitExceededError('Max size exceeded');\r\n     }\r\n+    callback(error, chunk);\r\n   }\r\n }\r\n \r\n module.exports = LimitSizeStream;\r\n"
                },
                {
                    "date": 1681397528679,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,11 +11,12 @@\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n     if (this.currentSize > this.maxSize) {\r\n-      throw new LimitExceededError('Max size exceeded');\r\n+      const err = new LimitExceededError('Max size exceeded');\r\n+      throw err;\r\n     }\r\n-    callback(error, chunk);\r\n+    callback(err, chunk);\r\n   }\r\n }\r\n \r\n module.exports = LimitSizeStream;\r\n"
                },
                {
                    "date": 1681397561081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,10 +10,10 @@\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n+    let err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n-      const err = new LimitExceededError('Max size exceeded');\r\n       throw err;\r\n     }\r\n     callback(err, chunk);\r\n   }\r\n"
                },
                {
                    "date": 1681397573800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n-    let err = new LimitExceededError('Max size exceeded');\r\n+    const err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n       throw err;\r\n     }\r\n     callback(err, chunk);\r\n"
                },
                {
                    "date": 1681397930804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n+    console.log(this.currentSize);\r\n     const err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n       throw err;\r\n     }\r\n"
                },
                {
                    "date": 1681398101696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n \r\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n     super(options);\r\n-    this.maxSize = options.maxSize;\r\n+    this.maxSize = options.limit;\r\n     this.highWaterMark = 1;\r\n     this.currentSize = 0;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1681398369345,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,9 @@\n     const err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n       throw err;\r\n     }\r\n-    callback(err, chunk);\r\n+    callback(null, chunk);\r\n   }\r\n }\r\n \r\n module.exports = LimitSizeStream;\r\n"
                },
                {
                    "date": 1681398627054,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,11 +2,10 @@\n const LimitExceededError = require('./LimitExceededError');\r\n \r\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n-    super(options);\r\n+    super({ ...options, highWaterMark: 1 });\r\n     this.maxSize = options.limit;\r\n-    this.highWaterMark = 1;\r\n     this.currentSize = 0;\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n"
                },
                {
                    "date": 1681398757915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const LimitExceededError = require('./LimitExceededError');\r\n \r\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n-    super({ ...options, highWaterMark: 1 });\r\n+    super({...options, highWaterMark: 1});\r\n     this.maxSize = options.limit;\r\n     this.currentSize = 0;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1681399079846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,8 +5,10 @@\n   constructor(options) {\r\n     super({...options, highWaterMark: 1});\r\n     this.maxSize = options.limit;\r\n     this.currentSize = 0;\r\n+    console.log(this.maxSize);\r\n+    console.log(this.highWaterMark);\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n"
                },
                {
                    "date": 1681399116105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n     super({...options, highWaterMark: 1});\r\n     this.maxSize = options.limit;\r\n     this.currentSize = 0;\r\n     console.log(this.maxSize);\r\n-    console.log(this.highWaterMark);\r\n+    console.log(this.readableHighWaterMark);\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n"
                },
                {
                    "date": 1681399180517,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n+    console.log(chunk);\r\n     console.log(this.currentSize);\r\n     const err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n       throw err;\r\n"
                },
                {
                    "date": 1681399244849,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize++;\r\n-    console.log(chunk);\r\n+    console.log(chunk.toString());\r\n     console.log(this.currentSize);\r\n     const err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n       throw err;\r\n"
                },
                {
                    "date": 1681399926086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n     console.log(this.readableHighWaterMark);\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n-    this.currentSize++;\r\n+    this.currentSize += chunk.byteLength;\r\n     console.log(chunk.toString());\r\n     console.log(this.currentSize);\r\n     const err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n"
                },
                {
                    "date": 1681399969283,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n     console.log(this.readableHighWaterMark);\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n+    console.log(chunk.byteLength);\r\n     this.currentSize += chunk.byteLength;\r\n     console.log(chunk.toString());\r\n     console.log(this.currentSize);\r\n     const err = new LimitExceededError('Max size exceeded');\r\n"
                },
                {
                    "date": 1681400083714,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -14,11 +14,10 @@\n     console.log(chunk.byteLength);\r\n     this.currentSize += chunk.byteLength;\r\n     console.log(chunk.toString());\r\n     console.log(this.currentSize);\r\n-    const err = new LimitExceededError('Max size exceeded');\r\n     if (this.currentSize > this.maxSize) {\r\n-      throw err;\r\n+      throw new LimitExceededError('Max size exceeded');\r\n     }\r\n     callback(null, chunk);\r\n   }\r\n }\r\n"
                },
                {
                    "date": 1681400189872,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,20 +2,15 @@\n const LimitExceededError = require('./LimitExceededError');\r\n \r\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n-    super({...options, highWaterMark: 1});\r\n+    super({...options});\r\n     this.maxSize = options.limit;\r\n     this.currentSize = 0;\r\n-    console.log(this.maxSize);\r\n-    console.log(this.readableHighWaterMark);\r\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n-    console.log(chunk.byteLength);\r\n     this.currentSize += chunk.byteLength;\r\n-    console.log(chunk.toString());\r\n-    console.log(this.currentSize);\r\n     if (this.currentSize > this.maxSize) {\r\n       throw new LimitExceededError('Max size exceeded');\r\n     }\r\n     callback(null, chunk);\r\n"
                },
                {
                    "date": 1681400305228,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,12 +9,13 @@\n   }\r\n \r\n   _transform(chunk, encoding, callback) {\r\n     this.currentSize += chunk.byteLength;\r\n+    let err = null;\r\n     if (this.currentSize > this.maxSize) {\r\n-      throw new LimitExceededError('Max size exceeded');\r\n+      err = new LimitExceededError('Max size exceeded');\r\n     }\r\n-    callback(null, chunk);\r\n+    callback(err, chunk);\r\n   }\r\n }\r\n \r\n module.exports = LimitSizeStream;\r\n"
                },
                {
                    "date": 1681400608319,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const LimitExceededError = require('./LimitExceededError');\r\n \r\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n-    super({...options});\r\n+    super({options});\r\n     this.maxSize = options.limit;\r\n     this.currentSize = 0;\r\n   }\r\n \r\n"
                },
                {
                    "date": 1681400614709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n const LimitExceededError = require('./LimitExceededError');\r\n \r\n class LimitSizeStream extends stream.Transform {\r\n   constructor(options) {\r\n-    super({options});\r\n+    super(options);\r\n     this.maxSize = options.limit;\r\n     this.currentSize = 0;\r\n   }\r\n \r\n"
                }
            ],
            "date": 1681377221800,
            "name": "Commit-0",
            "content": "const stream = require('stream');\r\nconst LimitExceededError = require('./LimitExceededError');\r\n\r\nclass LimitSizeStream extends stream.Transform {\r\n  constructor(options) {\r\n    super(options);\r\n  }\r\n\r\n  _transform(chunk, encoding, callback) {}\r\n}\r\n\r\nmodule.exports = LimitSizeStream;\r\n"
        }
    ]
}