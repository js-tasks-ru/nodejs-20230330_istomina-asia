{
    "sourceFile": "04-testing-configuration-logging/01-unit-tests/test/Validator.test.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 24,
            "patches": [
                {
                    "date": 1681738970318,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1681740907603,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,6 +17,16 @@\n       expect(errors).to.have.length(1);\r\n       expect(errors[0]).to.have.property('field').and.to.be.equal('name');\r\n       expect(errors[0]).to.have.property('error').and.to.be.equal('too short, expect 10, got 6');\r\n     });\r\n+    it('все правила должны содержать поля type, min и max', () => {\r\n+      const validator1 = new Validator({\r\n+        name: {\r\n+          min: 10,\r\n+          max: 20,\r\n+        },\r\n+      });\r\n+\r\n+      expect(errors).to.have.length(1);\r\n+    });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681741058116,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,8 +25,8 @@\n           max: 20,\r\n         },\r\n       });\r\n \r\n-      expect(errors).to.have.length(1);\r\n+      expect(validator1).to.throw();\r\n     });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681741193119,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,15 +17,18 @@\n       expect(errors).to.have.length(1);\r\n       expect(errors[0]).to.have.property('field').and.to.be.equal('name');\r\n       expect(errors[0]).to.have.property('error').and.to.be.equal('too short, expect 10, got 6');\r\n     });\r\n-    it('все правила должны содержать поля type, min и max', () => {\r\n-      const validator1 = new Validator({\r\n-        name: {\r\n-          min: 10,\r\n-          max: 20,\r\n-        },\r\n-      });\r\n+    it('все правила должны содержать поля type', () => {\r\n+      const test = () => {\r\n+        const validator = new Validator({\r\n+          name: {\r\n+            min: 10,\r\n+            max: 20,\r\n+          },\r\n+        });\r\n+        return validator;\r\n+      };\r\n \r\n       expect(validator1).to.throw();\r\n     });\r\n   });\r\n"
                },
                {
                    "date": 1681741236192,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,8 +28,8 @@\n         });\r\n         return validator;\r\n       };\r\n \r\n-      expect(validator1).to.throw();\r\n+      expect(test).to.throw();\r\n     });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681741611306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,6 +30,32 @@\n       };\r\n \r\n       expect(test).to.throw();\r\n     });\r\n+    it('все правила должны содержать поля min', () => {\r\n+      const test = () => {\r\n+        const validator = new Validator({\r\n+          name: {\r\n+            type: 'string',\r\n+            max: 20,\r\n+          },\r\n+        });\r\n+        return validator;\r\n+      };\r\n+\r\n+      expect(test).to.throw();\r\n+    });\r\n+    it('все правила должны содержать поля max', () => {\r\n+      const test = () => {\r\n+        const validator = new Validator({\r\n+          name: {\r\n+            type: 'string',\r\n+            min: 10,\r\n+          },\r\n+        });\r\n+        return validator;\r\n+      };\r\n+\r\n+      expect(test).to.throw();\r\n+    });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681743026254,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,6 +56,20 @@\n       };\r\n \r\n       expect(test).to.throw();\r\n     });\r\n+    it('поле max должно быть больше или равно поля min, иначе ошибка', () => {\r\n+      const test = () => {\r\n+        const validator = new Validator({\r\n+          name: {\r\n+            type: 'string',\r\n+            min: 10,\r\n+            max: 5,\r\n+          },\r\n+        });\r\n+        return validator;\r\n+      };\r\n+\r\n+      expect(test).to.throw();\r\n+    });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681743228582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,75 +1,62 @@\n const Validator = require('../Validator');\r\n const expect = require('chai').expect;\r\n \r\n describe('testing-configuration-logging/unit-tests', () => {\r\n-  describe('Validator', () => {\r\n-    it('валидатор проверяет строковые поля', () => {\r\n-      const validator = new Validator({\r\n-        name: {\r\n-          type: 'string',\r\n-          min: 10,\r\n-          max: 20,\r\n-        },\r\n+  describe('hoho', () => {\r\n+    describe('Validator', () => {\r\n+      it('все правила должны содержать поля type', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              min: 10,\r\n+              max: 20,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n+\r\n+        expect(test).to.throw();\r\n       });\r\n+      it('все правила должны содержать поля min', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              type: 'string',\r\n+              max: 20,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n \r\n-      const errors = validator.validate({name: 'Lalala'});\r\n+        expect(test).to.throw();\r\n+      });\r\n+      it('все правила должны содержать поля max', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              type: 'string',\r\n+              min: 10,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n \r\n-      expect(errors).to.have.length(1);\r\n-      expect(errors[0]).to.have.property('field').and.to.be.equal('name');\r\n-      expect(errors[0]).to.have.property('error').and.to.be.equal('too short, expect 10, got 6');\r\n-    });\r\n-    it('все правила должны содержать поля type', () => {\r\n-      const test = () => {\r\n-        const validator = new Validator({\r\n-          name: {\r\n-            min: 10,\r\n-            max: 20,\r\n-          },\r\n-        });\r\n-        return validator;\r\n-      };\r\n+        expect(test).to.throw();\r\n+      });\r\n+      it('поле max должно быть больше или равно поля min, иначе ошибка', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              type: 'string',\r\n+              min: 10,\r\n+              max: 5,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n \r\n-      expect(test).to.throw();\r\n+        expect(test).to.throw();\r\n+      });\r\n     });\r\n-    it('все правила должны содержать поля min', () => {\r\n-      const test = () => {\r\n-        const validator = new Validator({\r\n-          name: {\r\n-            type: 'string',\r\n-            max: 20,\r\n-          },\r\n-        });\r\n-        return validator;\r\n-      };\r\n-\r\n-      expect(test).to.throw();\r\n-    });\r\n-    it('все правила должны содержать поля max', () => {\r\n-      const test = () => {\r\n-        const validator = new Validator({\r\n-          name: {\r\n-            type: 'string',\r\n-            min: 10,\r\n-          },\r\n-        });\r\n-        return validator;\r\n-      };\r\n-\r\n-      expect(test).to.throw();\r\n-    });\r\n-    it('поле max должно быть больше или равно поля min, иначе ошибка', () => {\r\n-      const test = () => {\r\n-        const validator = new Validator({\r\n-          name: {\r\n-            type: 'string',\r\n-            min: 10,\r\n-            max: 5,\r\n-          },\r\n-        });\r\n-        return validator;\r\n-      };\r\n-\r\n-      expect(test).to.throw();\r\n-    });\r\n-  });\r\n });\r\n+});\r\n"
                },
                {
                    "date": 1681743267496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,6 +57,6 @@\n \r\n         expect(test).to.throw();\r\n       });\r\n     });\r\n+  });\r\n });\r\n-});\r\n"
                },
                {
                    "date": 1681743423114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,10 @@\n const Validator = require('../Validator');\r\n const expect = require('chai').expect;\r\n \r\n describe('testing-configuration-logging/unit-tests', () => {\r\n-  describe('hoho', () => {\r\n-    describe('Validator', () => {\r\n+  describe('Validator', () => {\r\n+    describe('Проверка конструктора', () => {\r\n       it('все правила должны содержать поля type', () => {\r\n         const test = () => {\r\n           const validator = new Validator({\r\n             name: {\r\n@@ -57,6 +57,34 @@\n \r\n         expect(test).to.throw();\r\n       });\r\n     });\r\n+    describe('Проверка валидации', () => {\r\n+      it('все правила должны содержать поля type', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              min: 10,\r\n+              max: 20,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n+\r\n+        expect(test).to.throw();\r\n+      });\r\n+      it('все правила должны содержать поля min', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              type: 'string',\r\n+              max: 20,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n+\r\n+        expect(test).to.throw();\r\n+      });\r\n+    });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681743518273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,8 +56,22 @@\n         };\r\n \r\n         expect(test).to.throw();\r\n       });\r\n+      it('поле type должно быть string или number', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              type: 'boolean',\r\n+              min: 10,\r\n+              max: 5,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n+\r\n+        expect(test).to.throw();\r\n+      });\r\n     });\r\n     describe('Проверка валидации', () => {\r\n       it('все правила должны содержать поля type', () => {\r\n         const test = () => {\r\n"
                },
                {
                    "date": 1681743565452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,10 +61,10 @@\n         const test = () => {\r\n           const validator = new Validator({\r\n             name: {\r\n               type: 'boolean',\r\n-              min: 10,\r\n-              max: 5,\r\n+              min: 5,\r\n+              max: 10,\r\n             },\r\n           });\r\n           return validator;\r\n         };\r\n"
                },
                {
                    "date": 1681743786008,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,8 +70,22 @@\n         };\r\n \r\n         expect(test).to.throw();\r\n       });\r\n+      it('поле max должно быть числовым', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              type: 'boolean',\r\n+              min: 5,\r\n+              max: 'hoho',\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n+\r\n+        expect(test).to.throw();\r\n+      });\r\n     });\r\n     describe('Проверка валидации', () => {\r\n       it('все правила должны содержать поля type', () => {\r\n         const test = () => {\r\n"
                },
                {
                    "date": 1681744840105,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,9 +74,9 @@\n       it('поле max должно быть числовым', () => {\r\n         const test = () => {\r\n           const validator = new Validator({\r\n             name: {\r\n-              type: 'boolean',\r\n+              type: 'string',\r\n               min: 5,\r\n               max: 'hoho',\r\n             },\r\n           });\r\n"
                },
                {
                    "date": 1681745019194,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -84,8 +84,22 @@\n         };\r\n \r\n         expect(test).to.throw();\r\n       });\r\n+      it('поле min должно быть числовым', () => {\r\n+        const test = () => {\r\n+          const validator = new Validator({\r\n+            name: {\r\n+              type: 'string',\r\n+              min: 'haha',\r\n+              max: 4,\r\n+            },\r\n+          });\r\n+          return validator;\r\n+        };\r\n+\r\n+        expect(test).to.throw();\r\n+      });\r\n     });\r\n     describe('Проверка валидации', () => {\r\n       it('все правила должны содержать поля type', () => {\r\n         const test = () => {\r\n"
                },
                {
                    "date": 1681745609263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,18 +100,22 @@\n         expect(test).to.throw();\r\n       });\r\n     });\r\n     describe('Проверка валидации', () => {\r\n-      it('все правила должны содержать поля type', () => {\r\n-        const test = () => {\r\n-          const validator = new Validator({\r\n-            name: {\r\n-              min: 10,\r\n-              max: 20,\r\n-            },\r\n-          });\r\n-          return validator;\r\n-        };\r\n+      it('должен проверяться тип на строковый или числовой', () => {\r\n+        const validator = new Validator({\r\n+          name: {\r\n+            type: 'string',\r\n+            min: 10,\r\n+            max: 20,\r\n+          },\r\n+          age: {\r\n+            type: 'number',\r\n+            min: 1,\r\n+            max: 99,\r\n+          },\r\n+        });\r\n+        validator;\r\n \r\n         expect(test).to.throw();\r\n       });\r\n       it('все правила должны содержать поля min', () => {\r\n"
                },
                {
                    "date": 1681745666435,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,11 +113,10 @@\n             min: 1,\r\n             max: 99,\r\n           },\r\n         });\r\n-        validator;\r\n-\r\n-        expect(test).to.throw();\r\n+        const errors = validator.validate({ name: 'La', age: 5 });\r\n+        expect(errors).to.have.length\r\n       });\r\n       it('все правила должны содержать поля min', () => {\r\n         const test = () => {\r\n           const validator = new Validator({\r\n"
                },
                {
                    "date": 1681745751835,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,10 +113,10 @@\n             min: 1,\r\n             max: 99,\r\n           },\r\n         });\r\n-        const errors = validator.validate({ name: 'La', age: 5 });\r\n-        expect(errors).to.have.length\r\n+        const errors = validator.validate({name: 'La', age: 5});\r\n+        expect(errors).to.have.length(2);\r\n       });\r\n       it('все правила должны содержать поля min', () => {\r\n         const test = () => {\r\n           const validator = new Validator({\r\n"
                },
                {
                    "date": 1681745769216,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n             min: 1,\r\n             max: 99,\r\n           },\r\n         });\r\n-        const errors = validator.validate({name: 'La', age: 5});\r\n+        const errors = validator.validate({name: 'La', age: 500});\r\n         expect(errors).to.have.length(2);\r\n       });\r\n       it('все правила должны содержать поля min', () => {\r\n         const test = () => {\r\n"
                },
                {
                    "date": 1681745797321,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,9 +113,9 @@\n             min: 1,\r\n             max: 99,\r\n           },\r\n         });\r\n-        const errors = validator.validate({name: 'La', age: 500});\r\n+        const errors = validator.validate({name: 100, age: 'old'});\r\n         expect(errors).to.have.length(2);\r\n       });\r\n       it('все правила должны содержать поля min', () => {\r\n         const test = () => {\r\n"
                },
                {
                    "date": 1681836397438,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,8 +114,9 @@\n             max: 99,\r\n           },\r\n         });\r\n         const errors = validator.validate({name: 100, age: 'old'});\r\n+        console.log('errs', errors);\r\n         expect(errors).to.have.length(2);\r\n       });\r\n       it('все правила должны содержать поля min', () => {\r\n         const test = () => {\r\n"
                },
                {
                    "date": 1681837084013,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,23 +114,29 @@\n             max: 99,\r\n           },\r\n         });\r\n         const errors = validator.validate({name: 100, age: 'old'});\r\n-        console.log('errs', errors);\r\n         expect(errors).to.have.length(2);\r\n       });\r\n-      it('все правила должны содержать поля min', () => {\r\n+      it('должны проверяться границы числовых полей', () => {\r\n         const test = () => {\r\n           const validator = new Validator({\r\n-            name: {\r\n-              type: 'string',\r\n-              max: 20,\r\n+            age: {\r\n+              type: 'number',\r\n+              min: 18,\r\n+              max: 70,\r\n             },\r\n+            age: {\r\n+              type: 'number',\r\n+              min: 18,\r\n+              max: 70,\r\n+            },\r\n           });\r\n           return validator;\r\n         };\r\n \r\n-        expect(test).to.throw();\r\n+        const errors = validator.validate({name: 100, age: 'old'});\r\n+        expect(errors).to.have.length(2);\r\n       });\r\n     });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681837181709,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -117,25 +117,22 @@\n         const errors = validator.validate({name: 100, age: 'old'});\r\n         expect(errors).to.have.length(2);\r\n       });\r\n       it('должны проверяться границы числовых полей', () => {\r\n-        const test = () => {\r\n-          const validator = new Validator({\r\n-            age: {\r\n-              type: 'number',\r\n-              min: 18,\r\n-              max: 70,\r\n-            },\r\n-            age: {\r\n-              type: 'number',\r\n-              min: 18,\r\n-              max: 70,\r\n-            },\r\n-          });\r\n-          return validator;\r\n-        };\r\n+        const validator = new Validator({\r\n+          age: {\r\n+            type: 'number',\r\n+            min: 18,\r\n+            max: 70,\r\n+          },\r\n+          experience: {\r\n+            type: 'number',\r\n+            min: 3,\r\n+            max: 10,\r\n+          },\r\n+        });\r\n \r\n-        const errors = validator.validate({name: 100, age: 'old'});\r\n+        const errors = validator.validate({age: 100, experience: 1});\r\n         expect(errors).to.have.length(2);\r\n       });\r\n     });\r\n   });\r\n"
                },
                {
                    "date": 1681837361740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -129,11 +129,26 @@\n             min: 3,\r\n             max: 10,\r\n           },\r\n         });\r\n-\r\n         const errors = validator.validate({age: 100, experience: 1});\r\n         expect(errors).to.have.length(2);\r\n       });\r\n+      it('должны проверяться границы строковых полей', () => {\r\n+        const validator = new Validator({\r\n+          name: {\r\n+            type: 'string',\r\n+            min: 4,\r\n+            max: 10,\r\n+          },\r\n+          surnamme: {\r\n+            type: 'string',\r\n+            min: 4,\r\n+            max: 10,\r\n+          },\r\n+        });\r\n+        const errors = validator.validate({name: 'lee', surnamme: 'huan-chohoho'});\r\n+        expect(errors).to.have.length(2);\r\n+      });\r\n     });\r\n   });\r\n });\r\n"
                },
                {
                    "date": 1681995862991,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,4 +151,5 @@\n       });\r\n     });\r\n   });\r\n });\r\n+\r\n"
                }
            ],
            "date": 1681738970318,
            "name": "Commit-0",
            "content": "const Validator = require('../Validator');\r\nconst expect = require('chai').expect;\r\n\r\ndescribe('testing-configuration-logging/unit-tests', () => {\r\n  describe('Validator', () => {\r\n    it('валидатор проверяет строковые поля', () => {\r\n      const validator = new Validator({\r\n        name: {\r\n          type: 'string',\r\n          min: 10,\r\n          max: 20,\r\n        },\r\n      });\r\n\r\n      const errors = validator.validate({name: 'Lalala'});\r\n\r\n      expect(errors).to.have.length(1);\r\n      expect(errors[0]).to.have.property('field').and.to.be.equal('name');\r\n      expect(errors[0]).to.have.property('error').and.to.be.equal('too short, expect 10, got 6');\r\n    });\r\n  });\r\n});\r\n"
        }
    ]
}